# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Server {
  id: ID!
  title: String
  slug: String
  isOfficial: Boolean
  description: String
  overview: String
  icon: CloudinaryImage_File
  category: ServerCategory
  homepage: String
  githubUrl: String
  githubOwner: String
  githubLicense: String
  githubLanguage: String
  githubPublishedAt: DateTime
  tools: JSON
  settings: JSON
  keywords: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ServerWhereUniqueInput {
  id: ID
  slug: String
  githubUrl: String
}

input ServerWhereInput {
  AND: [ServerWhereInput!]
  OR: [ServerWhereInput!]
  NOT: [ServerWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  isOfficial: BooleanFilter
  description: StringFilter
  overview: StringFilter
  category: ServerCategoryWhereInput
  homepage: StringFilter
  githubUrl: StringFilter
  githubOwner: StringFilter
  githubLicense: StringFilter
  githubLanguage: StringFilter
  githubPublishedAt: DateTimeNullableFilter
  keywords: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ServerOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  isOfficial: OrderDirection
  description: OrderDirection
  overview: OrderDirection
  homepage: OrderDirection
  githubUrl: OrderDirection
  githubOwner: OrderDirection
  githubLicense: OrderDirection
  githubLanguage: OrderDirection
  githubPublishedAt: OrderDirection
  keywords: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ServerUpdateInput {
  title: String
  slug: String
  isOfficial: Boolean
  description: String
  overview: String
  icon: Upload
  category: ServerCategoryRelateToOneForUpdateInput
  homepage: String
  githubUrl: String
  githubOwner: String
  githubLicense: String
  githubLanguage: String
  githubPublishedAt: DateTime
  tools: JSON
  settings: JSON
  keywords: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ServerCategoryRelateToOneForUpdateInput {
  create: ServerCategoryCreateInput
  connect: ServerCategoryWhereUniqueInput
  disconnect: Boolean
}

input ServerUpdateArgs {
  where: ServerWhereUniqueInput!
  data: ServerUpdateInput!
}

input ServerCreateInput {
  title: String
  slug: String
  isOfficial: Boolean
  description: String
  overview: String
  icon: Upload
  category: ServerCategoryRelateToOneForCreateInput
  homepage: String
  githubUrl: String
  githubOwner: String
  githubLicense: String
  githubLanguage: String
  githubPublishedAt: DateTime
  tools: JSON
  settings: JSON
  keywords: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ServerCategoryRelateToOneForCreateInput {
  create: ServerCategoryCreateInput
  connect: ServerCategoryWhereUniqueInput
}

type ServerCategory {
  id: ID!
  title: String
  slug: String
  icon: CloudinaryImage_File
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ServerCategoryWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input ServerCategoryWhereInput {
  AND: [ServerCategoryWhereInput!]
  OR: [ServerCategoryWhereInput!]
  NOT: [ServerCategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  isDefault: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ServerCategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  isDefault: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ServerCategoryUpdateInput {
  title: String
  slug: String
  icon: Upload
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ServerCategoryUpdateArgs {
  where: ServerCategoryWhereUniqueInput!
  data: ServerCategoryUpdateInput!
}

input ServerCategoryCreateInput {
  title: String
  slug: String
  icon: Upload
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Page {
  id: ID!
  title: String
  slug: String
  subtitle: String
  description: String
  seoTitle: String
  seoDescription: String
  seoKeywords: String
  seoIcon: CloudinaryImage_File
  createdAt: DateTime
  updatedAt: DateTime
}

input PageWhereUniqueInput {
  id: ID
  slug: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  subtitle: StringFilter
  description: StringFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoKeywords: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  subtitle: OrderDirection
  description: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  seoKeywords: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  subtitle: String
  description: String
  seoTitle: String
  seoDescription: String
  seoKeywords: String
  seoIcon: Upload
  createdAt: DateTime
  updatedAt: DateTime
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  subtitle: String
  description: String
  seoTitle: String
  seoDescription: String
  seoKeywords: String
  seoIcon: Upload
  createdAt: DateTime
  updatedAt: DateTime
}

type Testimonial {
  id: ID!
  fullName: String
  title: String
  avatar: CloudinaryImage_File
  feedback: String
  createdAt: DateTime
}

input TestimonialWhereUniqueInput {
  id: ID
}

input TestimonialWhereInput {
  AND: [TestimonialWhereInput!]
  OR: [TestimonialWhereInput!]
  NOT: [TestimonialWhereInput!]
  id: IDFilter
  fullName: StringFilter
  title: StringFilter
  feedback: StringFilter
  createdAt: DateTimeNullableFilter
}

input TestimonialOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  title: OrderDirection
  feedback: OrderDirection
  createdAt: OrderDirection
}

input TestimonialUpdateInput {
  fullName: String
  title: String
  avatar: Upload
  feedback: String
  createdAt: DateTime
}

input TestimonialUpdateArgs {
  where: TestimonialWhereUniqueInput!
  data: TestimonialUpdateInput!
}

input TestimonialCreateInput {
  fullName: String
  title: String
  avatar: Upload
  feedback: String
  createdAt: DateTime
}

type FrequentlyAskedQuestion {
  id: ID!
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FrequentlyAskedQuestionWhereUniqueInput {
  id: ID
}

input FrequentlyAskedQuestionWhereInput {
  AND: [FrequentlyAskedQuestionWhereInput!]
  OR: [FrequentlyAskedQuestionWhereInput!]
  NOT: [FrequentlyAskedQuestionWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FrequentlyAskedQuestionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FrequentlyAskedQuestionUpdateInput {
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FrequentlyAskedQuestionUpdateArgs {
  where: FrequentlyAskedQuestionWhereUniqueInput!
  data: FrequentlyAskedQuestionUpdateInput!
}

input FrequentlyAskedQuestionCreateInput {
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Config {
  id: ID!
  releaseDate: DateTime
}

input ConfigWhereUniqueInput {
  id: ID
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  releaseDate: DateTimeNullableFilter
}

input ConfigOrderByInput {
  id: OrderDirection
  releaseDate: OrderDirection
}

input ConfigUpdateInput {
  releaseDate: DateTime
}

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput! = {id: 1}
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  releaseDate: DateTime
}

type Waitlist {
  id: ID!
  email: String
  createdAt: DateTime
}

input WaitlistWhereUniqueInput {
  id: ID
  email: String
}

input WaitlistWhereInput {
  AND: [WaitlistWhereInput!]
  OR: [WaitlistWhereInput!]
  NOT: [WaitlistWhereInput!]
  id: IDFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input WaitlistOrderByInput {
  id: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input WaitlistUpdateInput {
  email: String
  createdAt: DateTime
}

input WaitlistUpdateArgs {
  where: WaitlistWhereUniqueInput!
  data: WaitlistUpdateInput!
}

input WaitlistCreateInput {
  email: String
  createdAt: DateTime
}

type Log {
  id: ID!
  title: String
  type: LogTypeType
  error: JSON
  createdAt: DateTime
}

enum LogTypeType {
  HandleOnMcpFileCreatedUpdatedFailed
}

input LogWhereUniqueInput {
  id: ID
}

input LogWhereInput {
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
  id: IDFilter
  title: StringFilter
  type: LogTypeTypeNullableFilter
  createdAt: DateTimeNullableFilter
}

input LogTypeTypeNullableFilter {
  equals: LogTypeType
  in: [LogTypeType!]
  notIn: [LogTypeType!]
  not: LogTypeTypeNullableFilter
}

input LogOrderByInput {
  id: OrderDirection
  title: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
}

input LogUpdateInput {
  title: String
  type: LogTypeType
  error: JSON
  createdAt: DateTime
}

input LogUpdateArgs {
  where: LogWhereUniqueInput!
  data: LogUpdateInput!
}

input LogCreateInput {
  title: String
  type: LogTypeType
  error: JSON
  createdAt: DateTime
}

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: AdminRoleType
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum AdminRoleType {
  SuperAdmin
  Editor
}

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: AdminRoleTypeNullableFilter
  createdAt: DateTimeNullableFilter
}

input AdminRoleTypeNullableFilter {
  equals: AdminRoleType
  in: [AdminRoleType!]
  notIn: [AdminRoleType!]
  not: AdminRoleTypeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  role: AdminRoleType
  createdAt: DateTime
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  role: AdminRoleType
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createServer(data: ServerCreateInput!): Server
  createServers(data: [ServerCreateInput!]!): [Server]
  updateServer(where: ServerWhereUniqueInput!, data: ServerUpdateInput!): Server
  updateServers(data: [ServerUpdateArgs!]!): [Server]
  deleteServer(where: ServerWhereUniqueInput!): Server
  deleteServers(where: [ServerWhereUniqueInput!]!): [Server]
  createServerCategory(data: ServerCategoryCreateInput!): ServerCategory
  createServerCategories(data: [ServerCategoryCreateInput!]!): [ServerCategory]
  updateServerCategory(where: ServerCategoryWhereUniqueInput!, data: ServerCategoryUpdateInput!): ServerCategory
  updateServerCategories(data: [ServerCategoryUpdateArgs!]!): [ServerCategory]
  deleteServerCategory(where: ServerCategoryWhereUniqueInput!): ServerCategory
  deleteServerCategories(where: [ServerCategoryWhereUniqueInput!]!): [ServerCategory]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createTestimonial(data: TestimonialCreateInput!): Testimonial
  createTestimonials(data: [TestimonialCreateInput!]!): [Testimonial]
  updateTestimonial(where: TestimonialWhereUniqueInput!, data: TestimonialUpdateInput!): Testimonial
  updateTestimonials(data: [TestimonialUpdateArgs!]!): [Testimonial]
  deleteTestimonial(where: TestimonialWhereUniqueInput!): Testimonial
  deleteTestimonials(where: [TestimonialWhereUniqueInput!]!): [Testimonial]
  createFrequentlyAskedQuestion(data: FrequentlyAskedQuestionCreateInput!): FrequentlyAskedQuestion
  createFrequentlyAskedQuestions(data: [FrequentlyAskedQuestionCreateInput!]!): [FrequentlyAskedQuestion]
  updateFrequentlyAskedQuestion(where: FrequentlyAskedQuestionWhereUniqueInput!, data: FrequentlyAskedQuestionUpdateInput!): FrequentlyAskedQuestion
  updateFrequentlyAskedQuestions(data: [FrequentlyAskedQuestionUpdateArgs!]!): [FrequentlyAskedQuestion]
  deleteFrequentlyAskedQuestion(where: FrequentlyAskedQuestionWhereUniqueInput!): FrequentlyAskedQuestion
  deleteFrequentlyAskedQuestions(where: [FrequentlyAskedQuestionWhereUniqueInput!]!): [FrequentlyAskedQuestion]
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput! = {id: 1}, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput! = {id: 1}): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  createWaitlist(data: WaitlistCreateInput!): Waitlist
  createWaitlists(data: [WaitlistCreateInput!]!): [Waitlist]
  updateWaitlist(where: WaitlistWhereUniqueInput!, data: WaitlistUpdateInput!): Waitlist
  updateWaitlists(data: [WaitlistUpdateArgs!]!): [Waitlist]
  deleteWaitlist(where: WaitlistWhereUniqueInput!): Waitlist
  deleteWaitlists(where: [WaitlistWhereUniqueInput!]!): [Waitlist]
  createLog(data: LogCreateInput!): Log
  createLogs(data: [LogCreateInput!]!): [Log]
  updateLog(where: LogWhereUniqueInput!, data: LogUpdateInput!): Log
  updateLogs(data: [LogUpdateArgs!]!): [Log]
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteLogs(where: [LogWhereUniqueInput!]!): [Log]
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
  createInitialAdmin(data: CreateInitialAdminInput!): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  server(where: ServerWhereUniqueInput!): Server
  servers(where: ServerWhereInput! = {}, orderBy: [ServerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerWhereUniqueInput): [Server!]
  serversCount(where: ServerWhereInput! = {}): Int
  serverCategory(where: ServerCategoryWhereUniqueInput!): ServerCategory
  serverCategories(where: ServerCategoryWhereInput! = {}, orderBy: [ServerCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerCategoryWhereUniqueInput): [ServerCategory!]
  serverCategoriesCount(where: ServerCategoryWhereInput! = {}): Int
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  testimonial(where: TestimonialWhereUniqueInput!): Testimonial
  testimonials(where: TestimonialWhereInput! = {}, orderBy: [TestimonialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestimonialWhereUniqueInput): [Testimonial!]
  testimonialsCount(where: TestimonialWhereInput! = {}): Int
  frequentlyAskedQuestion(where: FrequentlyAskedQuestionWhereUniqueInput!): FrequentlyAskedQuestion
  frequentlyAskedQuestions(where: FrequentlyAskedQuestionWhereInput! = {}, orderBy: [FrequentlyAskedQuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FrequentlyAskedQuestionWhereUniqueInput): [FrequentlyAskedQuestion!]
  frequentlyAskedQuestionsCount(where: FrequentlyAskedQuestionWhereInput! = {}): Int
  config(where: ConfigWhereUniqueInput! = {id: 1}): Config
  configs(where: ConfigWhereInput! = {id: {equals: 1}}, orderBy: [ConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigWhereUniqueInput): [Config!]
  configsCount(where: ConfigWhereInput! = {id: {equals: 1}}): Int
  waitlist(where: WaitlistWhereUniqueInput!): Waitlist
  waitlists(where: WaitlistWhereInput! = {}, orderBy: [WaitlistOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WaitlistWhereUniqueInput): [Waitlist!]
  waitlistsCount(where: WaitlistWhereInput! = {}): Int
  log(where: LogWhereUniqueInput!): Log
  logs(where: LogWhereInput! = {}, orderBy: [LogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogWhereUniqueInput): [Log!]
  logsCount(where: LogWhereInput! = {}): Int
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  adminsCount(where: AdminWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
